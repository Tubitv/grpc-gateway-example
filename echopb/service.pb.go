// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

package echopb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import any "github.com/golang/protobuf/ptypes/any"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type EchoMessage struct {
	Value                string   `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
	Options              *any.Any `protobuf:"bytes,2,opt,name=options" json:"options,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EchoMessage) Reset()         { *m = EchoMessage{} }
func (m *EchoMessage) String() string { return proto.CompactTextString(m) }
func (*EchoMessage) ProtoMessage()    {}
func (*EchoMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_bc121d236c2fc5fb, []int{0}
}
func (m *EchoMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EchoMessage.Unmarshal(m, b)
}
func (m *EchoMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EchoMessage.Marshal(b, m, deterministic)
}
func (dst *EchoMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EchoMessage.Merge(dst, src)
}
func (m *EchoMessage) XXX_Size() int {
	return xxx_messageInfo_EchoMessage.Size(m)
}
func (m *EchoMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_EchoMessage.DiscardUnknown(m)
}

var xxx_messageInfo_EchoMessage proto.InternalMessageInfo

func (m *EchoMessage) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *EchoMessage) GetOptions() *any.Any {
	if m != nil {
		return m.Options
	}
	return nil
}

type StreamEchoMessage struct {
	Value                string   `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
	Options              *any.Any `protobuf:"bytes,2,opt,name=options" json:"options,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StreamEchoMessage) Reset()         { *m = StreamEchoMessage{} }
func (m *StreamEchoMessage) String() string { return proto.CompactTextString(m) }
func (*StreamEchoMessage) ProtoMessage()    {}
func (*StreamEchoMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_bc121d236c2fc5fb, []int{1}
}
func (m *StreamEchoMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StreamEchoMessage.Unmarshal(m, b)
}
func (m *StreamEchoMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StreamEchoMessage.Marshal(b, m, deterministic)
}
func (dst *StreamEchoMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamEchoMessage.Merge(dst, src)
}
func (m *StreamEchoMessage) XXX_Size() int {
	return xxx_messageInfo_StreamEchoMessage.Size(m)
}
func (m *StreamEchoMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamEchoMessage.DiscardUnknown(m)
}

var xxx_messageInfo_StreamEchoMessage proto.InternalMessageInfo

func (m *StreamEchoMessage) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *StreamEchoMessage) GetOptions() *any.Any {
	if m != nil {
		return m.Options
	}
	return nil
}

func init() {
	proto.RegisterType((*EchoMessage)(nil), "echopb.EchoMessage")
	proto.RegisterType((*StreamEchoMessage)(nil), "echopb.StreamEchoMessage")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for EchoService service

type EchoServiceClient interface {
	Echo(ctx context.Context, in *EchoMessage, opts ...grpc.CallOption) (*EchoMessage, error)
	StreamEcho(ctx context.Context, opts ...grpc.CallOption) (EchoService_StreamEchoClient, error)
}

type echoServiceClient struct {
	cc *grpc.ClientConn
}

func NewEchoServiceClient(cc *grpc.ClientConn) EchoServiceClient {
	return &echoServiceClient{cc}
}

func (c *echoServiceClient) Echo(ctx context.Context, in *EchoMessage, opts ...grpc.CallOption) (*EchoMessage, error) {
	out := new(EchoMessage)
	err := grpc.Invoke(ctx, "/echopb.EchoService/Echo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *echoServiceClient) StreamEcho(ctx context.Context, opts ...grpc.CallOption) (EchoService_StreamEchoClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_EchoService_serviceDesc.Streams[0], c.cc, "/echopb.EchoService/StreamEcho", opts...)
	if err != nil {
		return nil, err
	}
	x := &echoServiceStreamEchoClient{stream}
	return x, nil
}

type EchoService_StreamEchoClient interface {
	Send(*StreamEchoMessage) error
	Recv() (*StreamEchoMessage, error)
	grpc.ClientStream
}

type echoServiceStreamEchoClient struct {
	grpc.ClientStream
}

func (x *echoServiceStreamEchoClient) Send(m *StreamEchoMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *echoServiceStreamEchoClient) Recv() (*StreamEchoMessage, error) {
	m := new(StreamEchoMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for EchoService service

type EchoServiceServer interface {
	Echo(context.Context, *EchoMessage) (*EchoMessage, error)
	StreamEcho(EchoService_StreamEchoServer) error
}

func RegisterEchoServiceServer(s *grpc.Server, srv EchoServiceServer) {
	s.RegisterService(&_EchoService_serviceDesc, srv)
}

func _EchoService_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EchoMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServiceServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/echopb.EchoService/Echo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServiceServer).Echo(ctx, req.(*EchoMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _EchoService_StreamEcho_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EchoServiceServer).StreamEcho(&echoServiceStreamEchoServer{stream})
}

type EchoService_StreamEchoServer interface {
	Send(*StreamEchoMessage) error
	Recv() (*StreamEchoMessage, error)
	grpc.ServerStream
}

type echoServiceStreamEchoServer struct {
	grpc.ServerStream
}

func (x *echoServiceStreamEchoServer) Send(m *StreamEchoMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *echoServiceStreamEchoServer) Recv() (*StreamEchoMessage, error) {
	m := new(StreamEchoMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _EchoService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "echopb.EchoService",
	HandlerType: (*EchoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Echo",
			Handler:    _EchoService_Echo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamEcho",
			Handler:       _EchoService_StreamEcho_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "service.proto",
}

func init() { proto.RegisterFile("service.proto", fileDescriptor_service_bc121d236c2fc5fb) }

var fileDescriptor_service_bc121d236c2fc5fb = []byte{
	// 248 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0x4e, 0x2d, 0x2a,
	0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4b, 0x4d, 0xce, 0xc8, 0x2f,
	0x48, 0x92, 0x92, 0x49, 0xcf, 0xcf, 0x4f, 0xcf, 0x49, 0xd5, 0x4f, 0x2c, 0xc8, 0xd4, 0x4f, 0xcc,
	0xcb, 0xcb, 0x2f, 0x49, 0x2c, 0xc9, 0xcc, 0xcf, 0x2b, 0x86, 0xa8, 0x92, 0x92, 0x84, 0xca, 0x82,
	0x79, 0x49, 0xa5, 0x69, 0xfa, 0x89, 0x79, 0x95, 0x10, 0x29, 0xa5, 0x60, 0x2e, 0x6e, 0xd7, 0xe4,
	0x8c, 0x7c, 0xdf, 0xd4, 0xe2, 0xe2, 0xc4, 0xf4, 0x54, 0x21, 0x11, 0x2e, 0xd6, 0xb2, 0xc4, 0x9c,
	0xd2, 0x54, 0x09, 0x46, 0x05, 0x46, 0x0d, 0xce, 0x20, 0x08, 0x47, 0x48, 0x8f, 0x8b, 0x3d, 0xbf,
	0x00, 0x6c, 0xa0, 0x04, 0x93, 0x02, 0xa3, 0x06, 0xb7, 0x91, 0x88, 0x1e, 0xc4, 0x44, 0x3d, 0x98,
	0x89, 0x7a, 0x8e, 0x79, 0x95, 0x41, 0x30, 0x45, 0x4a, 0x91, 0x5c, 0x82, 0xc1, 0x25, 0x45, 0xa9,
	0x89, 0xb9, 0x54, 0x37, 0xda, 0x68, 0x07, 0x23, 0xc4, 0xc1, 0xc1, 0x90, 0x60, 0x10, 0x72, 0xe5,
	0x62, 0x01, 0x71, 0x85, 0x84, 0xf5, 0x20, 0x21, 0xa1, 0x87, 0x64, 0xa5, 0x14, 0x36, 0x41, 0x25,
	0xe1, 0xa6, 0xcb, 0x4f, 0x26, 0x33, 0xf1, 0x2a, 0x71, 0xe8, 0x97, 0x19, 0xea, 0x83, 0xe4, 0xad,
	0x18, 0xb5, 0x84, 0x92, 0xb8, 0xb8, 0x10, 0x2e, 0x16, 0x92, 0x84, 0xe9, 0xc3, 0xf0, 0x85, 0x14,
	0x6e, 0x29, 0x25, 0x29, 0xb0, 0xc1, 0x22, 0x4a, 0xfc, 0x20, 0x83, 0x8b, 0xc1, 0xd2, 0xba, 0x50,
	0xf3, 0x35, 0x18, 0x0d, 0x18, 0x93, 0xd8, 0xc0, 0x3e, 0x32, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff,
	0x32, 0xa2, 0x80, 0x43, 0xc3, 0x01, 0x00, 0x00,
}
